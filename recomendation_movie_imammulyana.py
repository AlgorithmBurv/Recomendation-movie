# -*- coding: utf-8 -*-
"""Recomendation_Movie_ImamMulyana.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yw5iVngBLziLgHSL9h6Ea1Wo6Q3cgHk1

# Data Understanding

### Import library
"""

import pandas as pd
import numpy as np
from zipfile import ZipFile
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from pathlib import Path
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')

"""###  Loading Data"""

path = "/content/drive/MyDrive/Dataset PML/ratings.csv" #Rating
load_data = pd.read_csv(path)

path2 = "/content/drive/MyDrive/Dataset PML/movies.csv" #Movie
load_data2 = pd.read_csv(path2)

"""### Membuat data frame rating"""

df = pd.DataFrame(load_data)
df.head()

"""### Membuat data frame movie"""

df2 = pd.DataFrame(load_data2)
df2.head()

"""## Univariate Exploratory Data Analysis"""

df.info()

"""Data yang diambil dari 22 juta lebih hanya 200.000 data agar komputasi tidak berat"""

df = df.drop(df.index[200000:])

df.info()

df2.info()

"""### Mencari rating terendah"""

df.rating.min()

"""### Mencari rating tertinggi"""

df.rating.max()

"""### Melihat sebaran rating"""

# Melihat sebran rating

df['rating'].value_counts()

print('Jumlah penonton film: ', len(df.userId.unique()))
print('Jumlah film: ', len(df.movieId.unique()))
print('Jumlah genre: ', len(df2.genres.unique()))

# untuk pengecekan tipe genre akan dilakukan kembali saat data sudah displiting pada tahap data prepration

print('Tipe genre: ', df2.genres.unique())

"""### Membuat histogram"""

df.hist(bins=50, figsize=(20,15))
plt.show()

df2[df2.title.eq('Forrest Gump (1994)')]

df2[df2.title.eq('Pulp Fiction (1994)')]

df2[df2.title.eq('Silence of the Lambs, The (1991)')]

df2[df2.title.eq('Shawshank Redemption, The (1994)')]

df2[df2.title.eq('Jurassic Park (1993)')]

"""# Data Preparation

### Menggabungkan dataframe rating dengan movie berdasarkan nilai movieId
"""

movie = pd.merge(df, df2 , on='movieId', how='left')
movie

movie.info()

# Mencari 5 film yang paling banyak ditonton, {EDA dilakukan pada tahap prepration karena harus menggunkan data yang telah di merge}

movie['title'].value_counts()

"""### Cek missing value dengan fungsi isnull()"""

movie.isnull().sum()

"""### Melakukan splitting string"""

# Membuat agar setiap film hanya mempunyai 1 genre

split_columns = movie['genres'].str.split('|', expand=True)

# Menambahkan hasil split sebagai kolom baru ke DataFrame

movie = pd.concat([movie, split_columns], axis=1)

# Menampilkan DataFrame setelah split string

movie.head()

movie.info()

"""### Dropping Fitur"""

# Menghapus kolom yang tidak akan digunakan

movie_drop = movie.drop(['timestamp', 'genres', 1, 2, 3, 4, 5, 6, 7, 8, 9], axis=1)

movie_drop.head()

"""### Rename fitur"""

# Merubah nama kolom 0 menjadi genres

movie_rename = movie_drop.rename(columns={0: 'genres'})

movie_rename.head()

"""### Sorting fitur"""

data_movie = movie_rename

# Mengurutkan movie berdasarkan movieId kemudian memasukkannya ke dalam variabel data_movie

data_movie =   data_movie.sort_values('movieId', ascending=True)
data_movie.head()

"""### Mengecek berapa jumlah data_movie"""

len(data_movie.movieId.unique())

"""### Mengecek kategori movie yang unik"""

data_movie.genres.unique()

"""### Mengecek kategori movie"""

data_movie[data_movie['title'] == 'Toy Story (1995)']

"""### Membuat variabel preparation yang berisi dataframe data_movie kemudian mengurutkan berdasarkan movieId"""

preparation = data_movie
preparation.sort_values('movieId')

"""### Membuang data duplikat pada variabel preparation"""

preparation = preparation.drop_duplicates('movieId')
preparation

"""### Konversi data"""

# Mengonversi data series ‘movieId’ menjadi dalam bentuk list
movie_id = preparation['movieId'].tolist()

# Mengonversi data series ‘title’ menjadi dalam bentuk list
name_movie = preparation['title'].tolist()

# Mengonversi data series ‘genres’ menjadi dalam bentuk list
genres = preparation['genres'].tolist()

print(len(movie_id))
print(len(name_movie))
print(len(genres))

# Membuat dictionary untuk data ‘movie_id’, ‘title’, dan ‘genres’
movie_new = pd.DataFrame({
    'id': movie_id,
    'name_movie': name_movie,
    'genres': genres
})
movie_new

"""# Model Development dengan Content Based Filtering

### Mengambil 5 sampel
"""

data = movie_new
data.sample(5)

"""### Inisialisasi TfidfVectorizer"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()

"""### Melakukan perhitungan idf pada data genres"""

tf.fit(data['genres'])

"""### Mapping array dari fitur index integer ke fitur title"""

tf.get_feature_names_out()

"""### Melakukan fit lalu ditransformasikan ke bentuk matrix"""

tfidf_matrix = tf.fit_transform(data['genres'])

"""### Melihat ukuran matrix tfidf"""

tfidf_matrix.shape

"""### Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()"""

tfidf_matrix.todense()

"""### Membuat dataframe untuk melihat tf-idf matrix"""

# Kolom diisi dengan jenis genre
# Baris diisi dengan nama movie

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.name_movie
).sample(22, axis=1).sample(10, axis=0)

"""### Menghitung cosine similarity pada matrix tf-idf"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""### Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama movie"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['name_movie'], columns=data['name_movie'])
print('Shape:', cosine_sim_df.shape)

"""### Melihat similarity matrix pada setiap movie"""

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def movie_recommendations(nama_film, similarity_data=cosine_sim_df, items=data[['name_movie', 'genres']], k=5):
    """
    Rekomendasi movie berdasarkan kemiripan dataframe

    Parameter:
    ---
    nama_film : tipe data string (str)
                Nama movie (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan movie sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_film].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_film agar nama movie yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_film, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

"""### Film yang akan dijadikan acuan rekomendasi

"""

data[data.name_movie.eq('Toy Story (1995)')]

"""### Mendapatkan rekomendasi movie yang mirip dengan Toy Story (1995)"""

tes = movie_recommendations('Toy Story (1995)')
tes

"""# Evaluation

### Precision
"""

# Mengecek daftar nama kolom
print(tes.columns)

# Menghitung jumlah genre 'Adventure'
count_adventure = tes['genres'].value_counts()['Adventure']

# Menghitung total jumlah genre
total_genres = tes['genres'].count()

# Melakukan perhitungan evaluasi
evaluation = count_adventure / total_genres

# Menampilkan hasil
print(evaluation)